<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <title>HROOB</title>
    <script src="//cdn.jsdelivr.net/npm/phaser@3.11.0/dist/phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>

<body>
    <script>

var config = {
  type: Phaser.AUTO,
  width: 1550,
  height: 1080,
  physics: {
    default: "arcade",
    arcade: {
      gravity: { y: 300 },
      debug: false,
    },
  },
  scene: {
    preload: preload,
    create: create,
    update: update,
  },
};

// VARIABLES
var player;
var player2;
var platforms;
var cursors;
var cursors2;
var score_p1 = 0;
var score_p2 = 0;
var scoreText_p1;
var scoreText_p2;
var bombs;
var red_bombs;
var gameOver = false;
var stars;
var green_stars;

var game = new Phaser.Game(config);

function preload() {
  this.load.image("sky", "./assets/sky.png");
  this.load.image("ground", "./assets/purple_platform.png");
  this.load.image("star", "./assets/star.png");
  this.load.image("bomb", "./assets/bomb.png");
  this.load.image("green_star", "./assets/green_star.png");
  this.load.image("red_bomb", "./assets/red_bomb.png");

  this.load.spritesheet("dude_2", "./assets/dude_2.png", {
    frameWidth: 32,
    frameHeight: 48,
  });
  this.load.spritesheet("dude", "./assets/dude.png", {
    frameWidth: 32,
    frameHeight: 48,
  });
}

function create() {
  // RESOLUTION BACKGROUND
  this.add.image(960, 540, "sky").setScale(6);

  // CREATION PLATEFORME

  platforms = this.physics.add.staticGroup();

  platforms.create(800, 800, "ground").setScale(6).refreshBody();
  platforms.create(600, 400, "ground");
  platforms.create(50, 250, "ground");
  platforms.create(750, 220, "ground");
  platforms.create(1200, 450, "ground");
  platforms.create(1400, 200, "ground");
  platforms.create(800, 550, "ground");

  player = this.physics.add.sprite(1400, 450, "dude");
  player2 = this.physics.add.sprite(100, 450, "dude_2");

  player.setBounce(0.2);
  player.setCollideWorldBounds(true);

  player2.setBounce(0.2);
  player2.setCollideWorldBounds(true);

  // COMMANDE DE MOUVEMENT P1

  cursors = this.input.keyboard.createCursorKeys();

  this.anims.create({
    key: "left",
    frames: this.anims.generateFrameNumbers("dude", { start: 0, end: 3 }),
    frameRate: 10,
    repeat: -1,
  });

  this.anims.create({
    key: "turn_p1",
    frames: [{ key: "dude", frame: 4 }],
    frameRate: 20,
  });

  this.anims.create({
    key: "right",
    frames: this.anims.generateFrameNumbers("dude", { start: 5, end: 8 }),
    frameRate: 10,
    repeat: -1,
  });

  // COMMANDE DE MOUVEMENT P2

  cursors2 = this.input.keyboard.addKeys("Z,Q,S,D");

  this.anims.create({
    key: "Q",
    frames: this.anims.generateFrameNumbers("dude_2", { start: 0, end: 3 }),
    frameRate: 10,
    repeat: -1,
  });

  this.anims.create({
    key: "turn_p2",
    frames: [{ key: "dude_2", frame: 4 }],
    frameRate: 20,
  });

  this.anims.create({
    key: "D",
    frames: this.anims.generateFrameNumbers("dude_2", { start: 5, end: 8 }),
    frameRate: 10,
    repeat: -1,
  });

  // AJOUT DES ETOILES

  stars = this.physics.add.group({
    key: "star",
    repeat: 5,
    setXY: { x: 50, y: 600, stepX: 200 },
  });

  stars.children.iterate(function (child) {
    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
  });

  green_stars = this.physics.add.group({
    key: "green_star",
    repeat: 5,
    setXY: { x: 400, y: 600, stepX: 200 },
  });

  green_stars.children.iterate(function (child) {
    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
  });

  bombs = this.physics.add.group();
  red_bombs = this.physics.add.group();

  // COLLISION
  this.physics.add.collider(stars, platforms);
  this.physics.add.collider(bombs, platforms);
  this.physics.add.collider(green_stars, platforms);
  this.physics.add.collider(red_bombs, platforms);
  this.physics.add.collider(player, platforms);
  this.physics.add.collider(player2, platforms);
  this.physics.add.collider(player, player2);

  // AFFICHAGE SCORE
  scoreText_p1 = this.add.text(16, 16, "Score J1: 0", {
    fontSize: "32px",
    fill: "#000",
  });
  scoreText_p2 = this.add.text(500, 16, "Score J2: 0", {
    fontSize: "32px",
    fill: "#000",
  });

  // CHEVAUCHEMENT JOUEUR ETOILE
  this.physics.add.overlap(player, stars, collectStar, null, this);
  this.physics.add.collider(player, bombs, hitBomb, null, this);

  this.physics.add.overlap(player2, green_stars, collectStar2, null, this);
  this.physics.add.collider(player2, red_bombs, hitBomb2, null, this);
}

function update() {
  if (gameOver) {
    return;
  }
  // MOUVEMENT CLAVIER P1

  if (cursors.left.isDown) {
    player.setVelocityX(-160);

    player.anims.play("left", true);
  } else if (cursors.right.isDown) {
    player.setVelocityX(160);

    player.anims.play("right", true);
  } else {
    player.setVelocityX(0);

    player.anims.play("turn_p1");
  }

  if (cursors.up.isDown && player.body.touching.down) {
    player.setVelocityY(-330);
  }

  // MOUVEMENT CLAVIER P2

  if (cursors2.Q.isDown) {
    player2.setVelocityX(-160);

    player2.anims.play("Q", true);
  } else if (cursors2.D.isDown) {
    player2.setVelocityX(160);

    player2.anims.play("D", true);
  } else {
    player2.setVelocityX(0);

    player2.anims.play("turn_p2");
  }

  if (cursors2.Z.isDown && player2.body.touching.down) {
    player2.setVelocityY(-330);
  }
}
/*
        function update() {
              
        }
        */

// FONCTION GESTION ETOILE

function collectStar(player, star) {
  star.disableBody(true, true);

  score_p1 += 10;
  scoreText_p1.setText("Score J1: " + score_p1);

  if (stars.countActive(true) === 0) {
    stars.children.iterate(function (child) {
      child.enableBody(true, child.x, 0, true, true);
    });

    var x =
      player.x < 400
        ? Phaser.Math.Between(400, 800)
        : Phaser.Math.Between(0, 400);

    var red_bomb = red_bombs.create(x, 16, "red_bomb");
    red_bomb.setBounce(1);
    red_bomb.setCollideWorldBounds(true);
    red_bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
  }
}

function collectStar2(player2, green_star) {
  green_star.disableBody(true, true);

  score_p2 += 10;
  scoreText_p2.setText("Score J2: " + score_p2);

  if (green_stars.countActive(true) === 0) {
    green_stars.children.iterate(function (child) {
      child.enableBody(true, child.x, 0, true, true);
    });

    var x =
      player2.x < 400
        ? Phaser.Math.Between(400, 800)
        : Phaser.Math.Between(0, 400);

    var bomb = bombs.create(x, 16, "bomb");
    bomb.setBounce(1);
    bomb.setCollideWorldBounds(true);
    bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
  }
}

// SI ON TOUCHE LA BOMBE

function hitBomb(player, bomb) {
  this.physics.pause();
  player.setTint(0xff0000);
  player.anims.play("turn");
  gameOver = true;
}

function hitBomb2(player2, red_bomb) {
  this.physics.pause();
  player2.setTint(0xff0000);
  player2.anims.play("turn");
  gameOver = true;
}


    </script>


</body>

</html>